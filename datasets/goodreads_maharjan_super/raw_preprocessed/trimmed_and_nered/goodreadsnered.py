import datasets
import os
import yaml
from pathlib import Path
import configparser

# TODO: Add BibTeX citation
# Find for instance the citation on arxiv or on the dataset repo/website
_CITATION = """\
@InProceedings{huggingface:dataset,
title = {A great new dataset},
author={huggingface, Inc.
},
year={2020}
}
"""

# TODO: Add description of the dataset here
# You can copy an official description
_DESCRIPTION = """\
GoodReads dataset generated by ***this paper***
"""

try:
  import google.colab
  IN_COLAB = True
except:
  IN_COLAB = False

# filepath_train = '/content/drive/MyDrive/Thesis/Datasets/practice_dataset/train' r'G:\My Drive\Thesis\Datasets
# filepath_dev = '/content/drive/MyDrive/Thesis/Datasets/practice_dataset/dev'

yaml_data = None
dataset_base = None

config = configparser.ConfigParser()


if IN_COLAB:
    config.read(r'/content/drive/MyDrive/Thesis/BookSuccessPredictor/config.ini')
else:
    config.read(r'C:\Users\lucag\Google Drive\Thesis\BookSuccessPredictor\config_local.ini')

goodreads_maharjan_path = Path(config['Datasets']['nered_goodreads_maharjan_path'])
yaml_file_name = config['Datasets']['yaml_file_name']
yaml_data = goodreads_maharjan_path / yaml_file_name
dataset_base = goodreads_maharjan_path / 'txt'

def get_files_in_folders(folders):
  files_in_folders = []
  for folder in folders:
    for root, dirs, files in os.walk(folder):
      for file in files:
        if file.endswith(".txt"):
            files_in_folders.append(os.path.join(root, file))
            
  return files_in_folders

# TODO: Name of the dataset usually match the script name with CamelCase instead of snake_case
class GoodReadsPracticeDataset(datasets.GeneratorBasedBuilder):
    """TODO: Short description of my dataset."""

    VERSION = datasets.Version("1.1.0")

    # This is an example of a dataset with multiple configurations.
    # If you don't want/need to define several sub-sets in your dataset,
    # just remove the BUILDER_CONFIG_CLASS and the BUILDER_CONFIGS attributes.

    # If you need to make complex sub-parts in the datasets with configurable options
    # You can create your own builder configuration class to store attribute, inheriting from datasets.BuilderConfig
    # BUILDER_CONFIG_CLASS = MyBuilderConfig

    # You will be able to load one or the other configurations in the following list with
    # data = datasets.load_dataset('my_dataset', 'first_domain')
    # data = datasets.load_dataset('my_dataset', 'second_domain')
    BUILDER_CONFIGS = [
        datasets.BuilderConfig(name="main_domain", version=VERSION, description="This is the original source of the GoodReads dataset")
    ]

    # genre_mapper = {'Detective_and_mystery_stories', 'Drama', 'Fiction', 'Historical_fiction', 'Love_stories', 'Poetry', 'Science_fiction', 'Short_stories'}

    def _info(self):
        # TODO: This method specifies the datasets.DatasetInfo object which contains informations and typings for the dataset
        features = datasets.Features(
            {
                "text": datasets.Value("string"),
                "success_label": datasets.ClassLabel(num_classes = 2, names = ['failure', 'success']),
                "genre": datasets.ClassLabel(num_classes = 8, names = ['Detective_and_mystery_stories', 'Drama', 'Fiction', 'Historical_fiction', 'Love_stories', 'Poetry', 'Science_fiction', 'Short_stories']),
                "book_title": datasets.Value("string")
                # These are the features of your dataset like images, labels ...
            }
        )

        return datasets.DatasetInfo(
            # This is the description that will appear on the datasets page.
            description=_DESCRIPTION,
            # This defines the different columns of the dataset and their types
            features=features,  # Here we define them above because they are different between the two configurations
            # If there's a common (input, target) tuple from the features,
            # specify them here. They'll be used if as_supervised=True in
            # builder.as_dataset.
            supervised_keys=None,
            # Citation for the dataset
            citation=_CITATION,
        )

    def _split_generators(self, dl_manager):
        """Returns SplitGenerators."""
        # TODO: This method is tasked with downloading/extracting the data and defining the splits depending on the configuration
        # If several configurations are possible (listed in BUILDER_CONFIGS), the configuration selected by the user is in self.config.name

        # dl_manager is a datasets.download.DownloadManager that can be used to download and extract URLs
        # It can accept any type or nested list/dict and will give back the same structure with the url replaced with path to local files.
        # By default the archives will be extracted and a path to a cached folder where they are extracted is returned instead of the archive

        return [
            datasets.SplitGenerator(
                name=datasets.Split.TRAIN,
                # These kwargs will be passed to _generate_examples
                gen_kwargs={
                    "filepath": yaml_data,
                    "split": "train",
                },
            ),
            datasets.SplitGenerator(
                name=datasets.Split.VALIDATION,
                # These kwargs will be passed to _generate_examples
                gen_kwargs={
                    "filepath": yaml_data,
                    "split": "val",
                },
            ),
            datasets.SplitGenerator(
                name=datasets.Split.TEST,
                # These kwargs will be passed to _generate_examples
                gen_kwargs={
                    "filepath": yaml_data,
                    "split": "test",
                },
            ),
        ]

    # do we want to yield each book as a sample or chunks of each book as samples?
    def _generate_examples(
        self, filepath, split  # method parameters are unpacked from `gen_kwargs` as given in `_split_generators`
    ):
        """ Yields examples as (key, example) tuples. """
        # This method handles input defined in _split_generators to yield (key, example) tuples from the dataset.
        # The `key` is here for legacy reason (tfds) and is not important in itself.
        counter_id = 0
        with open(filepath) as file:
            documents = yaml.full_load(file)
            for doc in documents[split]:
                doc = doc[:len(doc)-4] + '.txt'
                path = list(dataset_base.rglob(doc))[0]
                
                if IN_COLAB:
                    classStr = os.path.dirname(path).rsplit('/', 1)[1]
                    genreStr = os.path.dirname(path).rsplit('/', 2)[1]
                else:
                    classStr = os.path.dirname(path).rsplit('\\', 1)[1]
                    genreStr = os.path.dirname(path).rsplit('\\', 2)[1]

                # print(classBool, genreStr)
                with open(path, 'r', encoding = 'utf-8') as file:
                    book = file.read()
                    yield counter_id, {
                        "text": book,
                        "success_label": classStr,
                        "genre": genreStr,
                        "book_title": doc
                    }
                counter_id += 1
